from sqlalchemy import *
from sqlalchemy.orm import *
from sqlalchemy.dialects.postgresql import TSVECTOR
# Set up the database connection
engine = create_engine('postgresql://postgres@localhost:5432/postgres')
connection = engine.connect()

# Create metadata object
metadata = MetaData()


Scrapped = Table("scrapped", metadata,
                 Column("id", Integer, primary_key=True),
                 Column("Caption", VARCHAR(400)),
                 Column("Address", VARCHAR(400)),
                 Column("Beds_info_0", VARCHAR(100)),
                 Column("Beds_info_1", VARCHAR(100)),
                 Column("Latitude", VARCHAR(100)),
                 Column("Longitude", VARCHAR(100)),
                 Column("scraped_at", VARCHAR(100)),
                 Column("updated_at", VARCHAR(100)),
                 )


# Define the building table
building = Table('building', metadata,
                 Column('id', Integer, primary_key=True),
                 Column('name', String),
                 Column('address', String),
                 Column('city', String),
                 Column('state', String),
                 Column('description', String),
                 Column('lat', Float),
                 Column('lng', Float),
                 Column('created_at', DateTime),
                 Column('zip', String),
                 Column('type', String),
                 Column('cooperate', Boolean),
                 Column('summary', String),
                 Column('company_id', Integer),
                 Column('scrape_city', String),
                 Column('address_full', String),
                 Column('media_count', Integer),
                 Column('ts', TSVECTOR)
                 )

# Define the building_unit table
building_unit = Table('building_unit', metadata,
                      Column('id', Integer, primary_key=True),
                      Column('building_id', Integer,
                             ForeignKey('building.id')),
                      Column('floor', String),
                      Column('unit_number', String),
                      Column('beds', Integer),
                      Column('baths', Float),
                      Column('sqft', Float),
                      Column('price', Float),
                      Column('available_date', String),
                      Column('created_on', DateTime),
                      Column('updated_on', DateTime),
                      Column('scraped_on', DateTime),
                      Column('scrape_id', Integer),
                      Column('floorplan', String),
                      Column('net_price', Float),
                      Column('price_change', Float),
                      Column('source_file', String),
                      Column('floorplan_fub_id', Integer)
                      )


# define the building info table
building_info = Table(
    'building_info',
    metadata,
    Column('id', Integer, primary_key=True),
    Column('address', String),
    Column('zipcode', String),
    Column('city', String),
    Column('state', String),
    Column('country', String),
    Column('latitude', Float),
    Column('longitude', Float),
    Column('year_built', Integer),
    Column('renovated_year', Integer),
    Column('beds', String),
    Column('baths', String),
    Column('unit_count', Integer),
    Column('floors', Integer),
    Column('building_size', Integer),
    Column('land_size', Integer),
    Column('building_class', String),
    Column('property_type', String),
    Column('amenities', JSON),
    Column('unit_types', JSON),
    Column('unit_sizes', JSON),
    Column('unit_rent_prices', JSON),
    Column('unit_availability', JSON),
    Column('unit_specials', JSON),
    Column('unit_floor_plans', JSON),
    Column('unit_features', JSON),
    Column('building_features', JSON),
    Column('management_company', String),
    Column('leasing_phone', String),
    Column('leasing_email', String),
    Column('leasing_office_hours', JSON),
    Column('website', String),
    Column('facebook', String),
    Column('instagram', String),
    Column('twitter', String),
    Column('youtube', String),
    Column('pinterest', String),
    Column('linkedin', String),
    Column('rss_feed', String),
    Column('yelp', String),
    Column('google_places', String),
    Column('ratings', JSON),
    Column('reviews', JSON),
    Column('special_offers', JSON),
    Column('contact_name', String),
    Column('contact_email', String),
    Column('contact_phone', String),
    Column('contact_title', String),
    Column('contact_office_hours', JSON),
    Column('contact_fax', String),
    Column('unit_convert_balcony', String),
    Column('unit_1_balcony', String),
    Column('unit_2_balcony', String),
    Column('unit_3_balcony', String),
    Column('age', Integer),
    Column('pool', String),
    Column('architect', JSON),
    Column('aptamigo', JSON),
    Column('hotspot_features', JSON),
    Column('hotspot_neighbourhood', String),
    Column('hotspot_description', String),
    Column('hotspot', JSON),
    Column('concession_source', String),
    Column('walk_score', Integer),
    Column('walk_score_description', String),
    Column('walk_score_updated_date', Date),
    Column('cooperation_percentage_sent', Float),
    Column('cooperation_fixed', Float),
    Column('occupancy_perc', String),
    Column('avg_rent', String),
    Column('avg_eff_rent', String),
    Column('avg_price_per_sqft', String),
    Column('avg_eff_price_per_sqft', String),
    Column('software_system', String),
    Column('min_lease_term', Float),
    Column('year_renovated', String),
    Column('building_type', String),
    Column('n_units', Integer),
    Column('n_stories', Integer),
    Column('regional_supervisor', String),
    Column('onsite_mgr', String),
    Column('section_8', Boolean),
    Column('pets_allowed', Boolean),
    Column('dog_allowed', Boolean),
    Column('cat_allowed', Boolean),
    Column('bird_allowed', Boolean),
    Column('pets_details', JSON),
    Column('approx_price', JSON),
    Column('cooperation_title', String),
    Column('preferred_tour_type', Integer),
    Column('adjusted_cooperation_percentage', Float),
    Column('comment', String),
    Column('showing_instruction', String),
)

# Creating all the tables
metadata.create_all(engine)
